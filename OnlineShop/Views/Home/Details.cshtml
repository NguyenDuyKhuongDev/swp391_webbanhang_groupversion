@model OnlineShop.Models.Product
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Chi tiết sản phẩm - " + Model.ProductName;
    var user = SignInManager.IsSignedIn(User) ? await UserManager.GetUserAsync(User) : null;
    var userId = user?.Id;
    bool hasPurchased = ViewBag.HasPurchased != null && (bool)ViewBag.HasPurchased;
    var comments = ViewBag.Comments as List<OnlineShop.Models.Feedback> ?? new List<OnlineShop.Models.Feedback>();
    bool isOutOfStock = Model.ProductSizes.All(ps => ps.QuantityBySize <= 0);
}

<h4>Chi tiết sản phẩm</h4>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<div class="row">
    <!-- Hình ảnh sản phẩm -->
    <div class="col-md-6">
        <img src="@Model.ProductImage" class="img-fluid product-detail-image" alt="@Model.ProductName" onerror="this.src='https://via.placeholder.com/400'" />

        <!-- Đánh giá và bình luận sản phẩm -->
        <div class="mt-4">
            <h5>Đánh giá của khách</h5>
            @if (comments.Any())
            {
                <div class="border p-3 mb-3">
                    @foreach (var comment in comments)
                    {
                        <div class="comment-row d-flex justify-content-between align-items-center mb-2" data-comment-id="@comment.CommentID">
                            <!-- Chế độ xem -->
                            <div class="comment-view w-100">
                                <p class="mb-1">
                                    <strong>@comment.CustomerName:</strong>
                                    <span class="comment-text">@comment.CommentText</span>
                                    <small class="text-muted">(@comment.CommentDate.ToString("dd/MM/yyyy HH:mm"))</small>
                                </p>
                            </div>
                            <!-- Chế độ chỉnh sửa -->
                            <div class="comment-edit w-100 d-none">
                                <div class="d-flex align-items-center">
                                    <strong>@comment.CustomerName:</strong>
                                    <textarea class="form-control comment-textarea mx-2" rows="1">@comment.CommentText</textarea>
                                    <small class="text-muted">(@comment.CommentDate.ToString("dd/MM/yyyy HH:mm"))</small>
                                </div>
                            </div>
                            @if (SignInManager.IsSignedIn(User) && comment.CustomerID == userId)
                            {
                                <div class="comment-actions d-flex align-items-center">
                                    <!-- Nút khi ở chế độ xem -->
                                    <div class="view-mode d-flex gap-1">
                                        <button class="btn btn-sm btn-warning edit-comment-btn">Sửa</button>
                                        <form asp-action="DeleteComment" asp-controller="Home" method="post" style="display:inline;" onsubmit="return confirm('Bạn có chắc muốn xóa bình luận này?');">
                                            <input type="hidden" name="id" value="@comment.CommentID" />
                                            <input type="hidden" name="productId" value="@Model.ProductID" />
                                            <button type="submit" class="btn btn-sm btn-danger">Xóa</button>
                                        </form>
                                    </div>
                                    <!-- Nút khi ở chế độ chỉnh sửa -->
                                    <div class="edit-mode d-none d-flex gap-1">
                                        <button type="button" class="btn btn-sm btn-primary save-comment-btn">Lưu</button>
                                        <button type="button" class="btn btn-sm btn-secondary cancel-comment-btn">Hủy</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">Chưa có đánh giá nào cho sản phẩm này.</p>
            }

            <h5>Bình luận sản phẩm</h5>
            @if (!SignInManager.IsSignedIn(User))
            {
                <p class="text-muted">Vui lòng <a href="@Url.Action("Login", "Account")">đăng nhập</a> để bình luận.</p>
            }
            else if (!hasPurchased)
            {
                <p class="text-muted">Bạn cần mua sản phẩm này để có thể bình luận.</p>
            }
            else
            {
                <form asp-action="AddComment" asp-controller="Home" method="post" class="mb-3">
                    <input type="hidden" name="productId" value="@Model.ProductID" />
                    <input type="hidden" name="customerId" value="@userId" />
                    <div class="mb-2">
                        <textarea name="commentText" class="form-control" rows="3" placeholder="Viết bình luận của bạn..." required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Gửi bình luận</button>
                </form>
            }
        </div>
    </div>

    <!-- Thông tin sản phẩm -->
    <div class="col-md-6">
        <h3>@Model.ProductName</h3>
        <h4 class="text-danger">Giá: @String.Format("{0:N0}đ", Model.ProductPrice)</h4>
        <p>@Model.ProductDescription</p>

        @if (isOutOfStock)
        {
            <div class="alert alert-warning mt-3">
                <strong>Hết hàng!</strong> Sản phẩm này hiện không có sẵn.
            </div>
        }
        else
        {
            <!-- Kích thước -->
            @if (Model.ProductSizes.Any())
            {
                <div class="mb-3 d-flex align-items-center gap-3">
                    <label class="form-label mb-0" style="min-width: 80px;">Kích thước:</label>
                    <div class="btn-group" role="group">
                        @foreach (var size in Model.ProductSizes)
                        {
                            bool isSizeOutOfStock = size.QuantityBySize <= 0;
                            <input type="radio"
                                   class="btn-check"
                                   name="categorySizeId"
                                   id="size_@size.CategorySizeID"
                                   value="@size.CategorySizeID"
                                   autocomplete="off"
                            @(size == Model.ProductSizes.First(ps => ps.QuantityBySize > 0) ? "checked" : "")
                            @(isSizeOutOfStock ? "disabled" : "") />
                            <label class="btn btn-outline-secondary size-btn @(isSizeOutOfStock ? "disabled" : "")"
                                   for="size_@size.CategorySizeID">
                                @size.CategorySize.CategorySizeName
                                @if (isSizeOutOfStock)
                                {
                                    <span class="text-danger ms-1">(Hết)</span>
                                }
                            </label>
                        }
                    </div>
                </div>
            }

            <!-- Số lượng -->
            <div class="mb-3 d-flex align-items-center gap-3">
                <label class="form-label mb-0" style="min-width: 80px;">Số lượng:</label>
                <div class="input-group quantity-selector" style="width: 150px;">
                    <button type="button" class="btn btn-outline-secondary" onclick="changeQuantity(-1)">-</button>
                    <input type="number"
                           id="quantity"
                           name="quantity"
                           class="form-control text-center"
                           value="1"
                           min="1"
                           max="@(Model.ProductSizes.FirstOrDefault(ps => ps.QuantityBySize > 0)?.QuantityBySize ?? 1)"
                           readonly />
                    <button type="button" class="btn btn-outline-secondary" onclick="changeQuantity(1)">+</button>
                </div>
            </div>

            <!-- Nút hành động -->
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary flex-grow-1" onclick="addToCart()">Thêm vào giỏ hàng</button>
                <button type="button" class="btn btn-danger flex-grow-1" onclick="buyNow()">Mua ngay</button>
            </div>

            <!-- Form ẩn để gửi dữ liệu -->
            <form id="cartForm" asp-action="AddToCart" asp-controller="Cart" method="get">
                <input type="hidden" name="productId" value="@Model.ProductID" />
                <input type="hidden" id="hiddenCategorySizeId" name="categorySizeId" value="@(Model.ProductSizes.FirstOrDefault(ps => ps.QuantityBySize > 0)?.CategorySizeID ?? Model.ProductSizes.FirstOrDefault()?.CategorySizeID)" />
                <input type="hidden" id="hiddenQuantity" name="quantity" value="1" />
            </form>
        }
    </div>
</div>

@section Styles {
    <style>
        .product-detail-image {
            max-height: 400px;
            object-fit: cover;
            width: 100%;
        }

        .size-btn {
            padding: 5px 15px;
            font-size: 0.9rem;
        }

            .size-btn.disabled {
                background-color: #f8f9fa;
                color: #6c757d;
                cursor: not-allowed;
            }

        .quantity-selector .btn {
            padding: 5px 10px;
        }

        .quantity-selector input {
            border: 1px solid #ced4da;
            padding: 5px;
        }

        .comment-row {
            position: relative;
        }

        .comment-textarea {
            flex-grow: 1;
            resize: none;
        }

        .comment-actions {
            flex-shrink: 0;
            margin-left: 10px;
        }

        .view-mode, .edit-mode {
            display: flex;
            gap: 5px; /* Khoảng cách giữa các nút */
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
    </style>
}

@section Scripts {
    <script>
        function changeQuantity(delta) {
            const input = document.getElementById('quantity');
            const hiddenQuantity = document.getElementById('hiddenQuantity');
            let value = parseInt(input.value);
            const max = parseInt(input.max);
            value += delta;
            if (value < 1) value = 1;
            if (value > max) value = max;
            input.value = value;
            hiddenQuantity.value = value;
        }

        document.querySelectorAll('input[name="categorySizeId"]').forEach(radio => {
            radio.addEventListener('change', function () {
                if (!this.disabled) {
                    document.getElementById('hiddenCategorySizeId').value = this.value;
                    const maxQuantity = @Json.Serialize(Model.ProductSizes.ToDictionary(ps => ps.CategorySizeID.ToString(), ps => ps.QuantityBySize));
                    document.getElementById('quantity').max = maxQuantity[this.value] || 1;
                    document.getElementById('quantity').value = 1;
                    document.getElementById('hiddenQuantity').value = 1;
                }
            });
        });

        function addToCart() {
            const form = document.getElementById('cartForm');
            form.action = '@Url.Action("AddToCart", "Cart")';
            form.submit();
        }

        function buyNow() {
            const form = document.getElementById('cartForm');
            form.action = '@Url.Action("AddToCartAndCheckout", "Cart")';
            form.submit();
        }

        // Xử lý chỉnh sửa bình luận tại chỗ
        document.querySelectorAll('.edit-comment-btn').forEach(button => {
            button.addEventListener('click', function () {
                const commentRow = this.closest('.comment-row');
                const commentId = commentRow.dataset.commentId;
                const viewMode = commentRow.querySelector('.comment-view');
                const editMode = commentRow.querySelector('.comment-edit');
                const viewActions = commentRow.querySelector('.view-mode');
                const editActions = commentRow.querySelector('.edit-mode');
                const textarea = editMode.querySelector('.comment-textarea');

                // Chuyển sang chế độ chỉnh sửa
                viewMode.classList.add('d-none');
                editMode.classList.remove('d-none');
                viewActions.classList.add('d-none');
                editActions.classList.remove('d-none');

                // Đặt con trỏ chuột ở cuối dòng
                textarea.focus();
                textarea.selectionStart = textarea.selectionEnd = textarea.value.length;
            });
        });

        document.querySelectorAll('.cancel-comment-btn').forEach(button => {
            button.addEventListener('click', function () {
                const commentRow = this.closest('.comment-row');
                const viewMode = commentRow.querySelector('.comment-view');
                const editMode = commentRow.querySelector('.comment-edit');
                const viewActions = commentRow.querySelector('.view-mode');
                const editActions = commentRow.querySelector('.edit-mode');
                const textarea = editMode.querySelector('.comment-textarea');
                const originalText = viewMode.querySelector('.comment-text').textContent;

                // Đặt lại nội dung và chuyển về chế độ xem
                textarea.value = originalText;
                viewMode.classList.remove('d-none');
                editMode.classList.add('d-none');
                viewActions.classList.remove('d-none');
                editActions.classList.add('d-none');
            });
        });

        document.querySelectorAll('.save-comment-btn').forEach(button => {
            button.addEventListener('click', function () {
                const commentRow = this.closest('.comment-row');
                const commentId = commentRow.dataset.commentId;
                const viewMode = commentRow.querySelector('.comment-view');
                const editMode = commentRow.querySelector('.comment-edit');
                const viewActions = commentRow.querySelector('.view-mode');
                const editActions = commentRow.querySelector('.edit-mode');
                const textarea = editMode.querySelector('.comment-textarea');
                const newText = textarea.value.trim();

                if (!newText) {
                    alert('Bình luận không được để trống!');
                    return;
                }

                // Gửi yêu cầu cập nhật qua AJAX
                fetch('@Url.Action("EditComment", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commentId: commentId,
                        commentText: newText,
                        productId: @Model.ProductID
                            })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cập nhật nội dung bình luận và thời gian
                            viewMode.querySelector('.comment-text').textContent = newText;
                            viewMode.querySelector('.text-muted').textContent = `(${new Date().toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}))`;

                            // Chuyển về chế độ xem
                            viewMode.classList.remove('d-none');
                            editMode.classList.add('d-none');
                            viewActions.classList.remove('d-none');
                            editActions.classList.add('d-none');

                            // Hiển thị thông báo thành công
                            const alertSuccess = document.createElement('div');
                            alertSuccess.className = 'alert alert-success';
                            alertSuccess.textContent = 'Cập nhật bình luận thành công!';
                            document.querySelector('.row').prepend(alertSuccess);
                            setTimeout(() => alertSuccess.remove(), 3000);
                        } else {
                            alert(data.message || 'Cập nhật bình luận thất bại!');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi cập nhật bình luận!');
                    });
            });
        });
    </script>
}